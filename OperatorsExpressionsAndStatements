/* 01.Write an expression that checks if given integer is odd or even.*/


using System;

class OddOrEven
{
    static void Main()
    {
        //Write an expression that checks if given integer is odd or even.
        Console.WriteLine("Enter a number from -2,147,483,648 to 2,147,483,647");
        string j = Console.ReadLine();
        try
        {
            int i = int.Parse(j);
            if (i % 2 == 0)
            {
                Console.WriteLine("The number you've entered is even");
            }
        else
        {
            Console.WriteLine("The number you've entered is odd");
        }
        }
        catch (System.FormatException)
        {
            Console.WriteLine("What you have just entered is not a number");
            Main();
        }
        catch (System.OverflowException)
        {
            Console.WriteLine("You've entered a number which is out of the range specified.");
            Main();
        }
    }
}


/**********************************************************************************************************************/


// 02. Write a boolean expression that checks for given integer if it can be divided (without remainder) by 7 and 5 in the same time.

using System;

class DividingWithoutRemainder
{
    static void Main()
    {
        Console.WriteLine("Please, enter a  valid number");
        string str = Console.ReadLine();
        try
        {
            int i = int.Parse(str);
            if ((i % 7 == 0) && (i % 5 == 0))
            {
                Console.WriteLine("The number you've entered can be divived without remainder by both 5 and 7 in the same time!");
            }
            else
            {
                Console.WriteLine("The number you've entered can't be divived without remainder by both 5 and 7 in the same time!");
            }
        }
        catch (System.FormatException)
        {
            Console.WriteLine("You didn't enter a valid number!");
            Main();
        }
       
    }
}


/**********************************************************************************************************************/


// 03.Write an expression that calculates rectangle’s area by given width and height.

using System;

class RectangleArea
{
    static void Main()
    {
        Console.WriteLine("Please, enter the height and width of a rectangle in the console.");
        string height = Console.ReadLine();
        string width = Console.ReadLine();
        try
        {
            decimal h = decimal.Parse(height);
            decimal w = decimal.Parse(width);
            Console.WriteLine("The Area of the rectangle with the given height and width is {0}", h*w);
        }
        catch (System.FormatException)
        {
            Console.WriteLine("You didn't enter valid values for height and/or width!Try again.");
            Main();
        }
    }
}


/**********************************************************************************************************************/


// 04. Write an expression that checks for given integer if its third digit (right-to-left) is 7. E. g. 1732  true.

using System;

class ThirdDigitIs7OrNot
{
    static void Main()
    {
        string consoleinput = Console.ReadLine();
        try
        {
            decimal number = decimal.Parse(consoleinput);
            decimal absoluteValue = Math.Abs(number);
            decimal i = absoluteValue / 100;
            if (i % 10 == 7)
            {
                Console.WriteLine("-> true");
            }
            else
            {
                Console.WriteLine("-> false");
            }
        }
        catch (System.FormatException)
        {

            Console.WriteLine("Invalid number entered!Try again.");
            Main();
        }
        catch (System.OverflowException)
        {
            Console.WriteLine("The number you've entered is too big for the program to handle, try with a smaller number");
            Main();
        }
        
    }
}


/**********************************************************************************************************************/


/* 05. Write a boolean expression for finding if the bit 3 (counting from 0) of a given integer is 1 or 0. */

using System;

class FindTheThirdBitValue
{
    static void Main()
    {
        Console.WriteLine("Please, enter an integer!");
        int number = int.Parse(Console.ReadLine());
        int mask = 1 << 3;
        int numberMask = number & mask;
        int bit = numberMask >> 3;
        Console.WriteLine("The third bit is {0}", bit);
    }
}


/**********************************************************************************************************************/


/* 06. Write an expression that checks if given point (x,  y) is within a circle K(O, 5).
 *Presuming the K(0,5) means that the center of the cicle is the center of the 
 *coordinate system, then my solution is:*/

using System;

class PointWithinCircle
{
    static void Main()
    {
        Console.WriteLine("Please, enter a value for coordinates X and Y of the point, each on a separate line!");
        string xValueInString = Console.ReadLine();
        string yValueInString = Console.ReadLine();
        try
        {
            double xValue = double.Parse(xValueInString);
            double yValue = double.Parse(yValueInString);
            double x = Math.Abs(xValue);
            double y = Math.Abs(yValue);
            double radius = 5;
            if ((x <= radius) && (y <= radius))
            {
                Console.WriteLine("The point is within the area of the circle");
            }
            else
            {
                Console.WriteLine("The point is outside the area of the circle");
            }
        }
        catch (System.FormatException)
        {
            Console.WriteLine("Please, enter valid coordinates for X and Y");
            Main();
        }
        catch (System.OverflowException)
        {
            Console.WriteLine("This point is outside the cicle somewhere in a galaxy far far away :D");
        }
    }
}


/**********************************************************************************************************************/


/* 07. Write an expression that checks if given positive integer number n (n ≤ 100) is prime. E.g. 37 is prime. */

using System;

class CheckIfNumberIsPrime
{
    static void Main()
    {
        Console.Write("Enter a positive number: ");
        try
        {
            int n = int.Parse(Console.ReadLine());
            if ((n > 100) || (n <= 0))
            {
                Console.WriteLine("You have entered a number outside the range specified.Try again.");
                Main();
            }
            else
            {
                uint divider = 2;
                uint maxDivider = (uint)Math.Sqrt(n);
                bool prime = true;
                while (prime && (divider <= maxDivider))
                {
                    if (n % divider == 0)
                    {
                        prime = false;
                    }
                    divider++;
                }
                Console.WriteLine("Prime? {0}", prime);
            }
        }
        catch (System.FormatException)
        {

            Console.WriteLine("You didn't enter a valid number!Try again!");
            Main();
        }
        catch (System.OverflowException)
        {
            Console.WriteLine("You entered a number beyond the range specified!Try Again.");
            Main();
        }
    }       
}


/**********************************************************************************************************************/


/* 08. Write an expression that calculates trapezoid's area by given sides a and b and height h. */

using System;

class CalculateTrapedzoidArea 
{
    static void Main()
    {
        string aInput = Console.ReadLine();
        string bInput = Console.ReadLine();
        string hInput = Console.ReadLine();
        double b = double.Parse(aInput);
        double a = double.Parse(aInput);
        double h = double.Parse(aInput);
        Console.WriteLine("Trapezoid's area is {0}", ((a + b) / 2) * h); 
    }
}


/**********************************************************************************************************************/


/* 09.Write an expression that checks for given point (x, y) if it is within the circle K( (1,1), 3) and out of the rectangle R(top=1, left=-1, width=6, height=2). */


using System;

class InCircleOutOfRectangle
{
    static void Main()
    {
        decimal x, y;
        Console.Write("Please, enter coordinate x!");
        x = decimal.Parse(Console.ReadLine());
        Console.Write("Please, enter coordinate y!");
        y = decimal.Parse(Console.ReadLine());
        if (((x - 1) * (x - 1) + (y - 1) * (y - 1)) <= 9)
        {
            Console.WriteLine("The point is within the circle");
            if ((x < (-1)) || (x > 5))
            {
                Console.WriteLine("The point is out of the rectangle");
            }
            else if (y > 1 || y < (-1))
            {
                Console.WriteLine("The point is out of the rectangle");
            }
            else if (((x > (-1)) || (x < 5)) && (y < 1 || y > (-1)))
            {
                Console.WriteLine("The point is within the rectangle");
            }
        }
        else
        {
            Console.WriteLine("The point is out the circle");
            if ((x < (-1)) || (x > 5))
            {
                Console.WriteLine("The point is out of the rectangle");
            }
            else if (y > 1 || y < (-1))
            {
                Console.WriteLine("The point is within the rectangle");
            }
            else if (((x > (-1)) || (x < 5)) && (y < 1 || y > (-1)))
            {
                Console.WriteLine("The point is within the rectangle");
            }
        }
    }
}


/**********************************************************************************************************************/


/* 10. Write a boolean expression that returns if the bit at position p (counting from 0) in a given integer number v has value of 1. Example: v=5; p=1  false */

using System;

class BitValueAtGivenPosition
{
    static void Main()
    {
        Console.WriteLine("Please, enter an integer and position");
        int v = int.Parse(Console.ReadLine());
        int p = int.Parse(Console.ReadLine());
        int mask = 1 << p;
        int numberMask = v & mask;
        int bit = numberMask >> p;
        if (bit == 0)
        {
            Console.WriteLine("v={0} p={1} -> false", v, p);
        }
        else
        {
            Console.WriteLine("v={0} p={1} -> true", v, p);
        }
    }
}

/**********************************************************************************************************************/


/* 11. Write an expression that extracts from a given integer 
 * i the value of a given bit number b. Example: i=5; b=2  value=1.*/

using System;

class ExtractBitValue
{
    static void Main()
    {
        int iNumber = 567;
        int bBitNumber = 18;
        byte value = 1;
        int newNumber = (iNumber >> bBitNumber) & 1;
        if (newNumber == 0)
        {
            value = 0;
        }
        else
        {
            value = 1;
        }
        Console.WriteLine("The value of the {0}th bit is {1}", bBitNumber, value);
    }
}


/**********************************************************************************************************************/


* 12. We are given integer number n, value v (v=0 or 1) and a position p. 
 * Write a sequence of operators that modifies n to hold the value v at 
 * the position p from the binary representation of n.
  Example: n = 5 (00000101), p=3, v=1  13 (00001101)
	n = 5 (00000101), p=2, v=0  1 (00000001) */

using System;

class ModifyNumToHoldBitValue
{
    static void Main()
    {
        int n = int.Parse(Console.ReadLine());
        int p = int.Parse(Console.ReadLine());
        int v = int.Parse(Console.ReadLine());
        int mask = 1 << p;
        int maskIf = (mask & n) != 0 ? 1 : 0; 

        Console.WriteLine("Before modification: {0}", Convert.ToString(n, 2).PadLeft(32, '0'));
        if (maskIf == 0)
        {
            n |= (1 << p);
        }
        else
        {
            n &= ~(1 << p);
        }
        Console.WriteLine("Modified: {0}", Convert.ToString(n, 2).PadLeft(32, '0'));
    }
}


/**********************************************************************************************************************/


/* 13. Write a program that exchanges bits 3, 4 and 5 with bits 24, 25 and 26 of given 32-bit unsigned integer. */

using System;

class ExchangingBits
{
    static void Main()
    {
        //Write a program that exchanges bits 3, 4 and 5 with bits 24, 25 and 26 of given 32-bit unsigned integer.

        uint number = 1934490349;
        uint mask = 7;
        uint firstTreeBits = number & (mask << 3);
        uint secondTreeBits = number & (mask << 24);
        firstTreeBits = firstTreeBits << 21;
        secondTreeBits = secondTreeBits >> 21;
        number = number & (~(mask << 3));
        Console.WriteLine(Convert.ToString(number, 2));
        number = number & (~(mask << 24));
        Console.WriteLine(Convert.ToString(number, 2));
        number = number | firstTreeBits;
        Console.WriteLine(Convert.ToString(number, 2));
        number = number | secondTreeBits;
        Console.WriteLine(Convert.ToString(number, 2));
    }
}


/**********************************************************************************************************************/


/* 14. * Write a program that exchanges bits {p, p+1, …, p+k-1) with bits {q, q+1, …, q+k-1}
 * of given 32-bit unsigned integer.*/

using System;

class ExchangingBitSequences
{
    static void Main()
    {
        Console.Write("Please, enter a positive integer! ");
        string intInput = Console.ReadLine();
        uint number = uint.Parse(intInput);
        Console.Write("Please, enter the number of bits you want to exchange?");
        string bitsNumber = Console.ReadLine();
        int bitsToExchange = int.Parse(bitsNumber);
        Console.Write("Please, select a start position for the first sequence of {0} bits: ", bitsToExchange);
        string startPosition1 = Console.ReadLine();
        int position1 = int.Parse(startPosition1);
        Console.Write("Please, select a start position for the second sequence of {0} bits: ", bitsToExchange);
        string startPosition2 = Console.ReadLine();
        int position2 = int.Parse(startPosition2);
        uint mask1 = Convert.ToUInt32(uint.MaxValue >> (32 - bitsToExchange)); 
        mask1 = mask1 << (position1 - 1);        
        uint mask2 = Convert.ToUInt32(uint.MaxValue >> (32 - bitsToExchange));
        mask2 = mask2 << (position2 - 1);
        uint juniorBits = number & mask1;  
        uint seniorBits = number & mask2;
        uint mask = Convert.ToUInt32(number & (~(mask1 | mask2)));  
        uint newValue = mask | (juniorBits << ((position2 - position1)));
        newValue = newValue | (seniorBits >> ((position2 - position1)));
        Console.WriteLine("The new value is {0}", newValue);
    }
}


/* The End */


 

